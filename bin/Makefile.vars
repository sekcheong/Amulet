##
##  Pathname variables
##

TOP_DIR = $(AMULET_DIR)

INC_DIR = $(TOP_DIR)/include/amulet
BIN_DIR = $(TOP_DIR)/bin
SRC_DIR = $(TOP_DIR)/src
LIB_DIR = $(TOP_DIR)/lib
SAMPLES_DIR = $(TOP_DIR)/samples

GEM_DIR = $(SRC_DIR)/gem
ORE_DIR = $(SRC_DIR)/object
OPAL_DIR = $(SRC_DIR)/opal
INTER_DIR = $(SRC_DIR)/inter
GESTURE_DIR = $(SRC_DIR)/gesture
UTILS_DIR = $(SRC_DIR)/utils
DEBUG_DIR = $(SRC_DIR)/debug
WIDGETS_DIR = $(SRC_DIR)/widgets
ANIM_DIR = $(SRC_DIR)/anim


ANY_OBJECT_FILE=$(SRC_DIR)/*/*$(O)  $(BIN_DIR)/*$(O) $(LIB_DIR)/*$(O) $(SAMPLES_DIR)/*/*$(O) $(SAMPLES_DIR)/*$(O)
ANY_BACKUP_FILE=$(TOP_DIR)/*~  $(TOP_DIR)/*/*~  $(TOP_DIR)/*/*/*~
ANY_TEST_PROGRAM=$(TESTS) $(SAMPLES)
ANY_LIBRARY=$(LIB_DIR)/lib*


##
##  Library variables
##

# Shared library version (not necessarily the same as the Amulet version.
# According to the SunOS "ld" man page:  the major version must be 
# incremented whenever the exported Amulet interface changes.  The minor 
# version should be incremented if the library is re-released (say, with
# bug fixes) without changing the exported interface.  It isn't obvious
# what this means in the context of C++.
AM_MAJOR_VERSION=3
AM_MINOR_VERSION=0


##
##  Compiler variables
##

##     These variables should be set by the included file named by the
##     environment variable AMULET_VARS_FILE:
##        CC
##        LD (defaults to ld)
##        AR (defaults to ar)
##        RANLIB (defaults to ranlib)
##        RM (defaults to /bin/rm)
##        AM_CFLAGS
##        AM_LIBS
##	  AMULET_ROOT (defaults to same as AMULET_DIR)
##	  AM_DEVELOP
##	  AM_RELEASE
##	  AM_INHOUSE
##	  AM_NODEBUGSYM
##	  AM_LIB_LDFLAGS
##	  AM_GEM_SOURCE
##	  AM_STATIC_LIB_MAKE
##	  AM_SHARED_LIB_MAKE (defaults to same as AM_STATIC_LIB_MAKE)
##	  AM_LIBS_TO_MAKE (defaults to amulet)
##	  AM_SAMPLE_FLAGS (defaults to AM_DEVELOP)

AR = ar
RANLIB = ranlib
RM = rm -f
AM_OBJ_SUFFIX=.o
AM_EXE_SUFFIX=
AM_NULL=
AM_EXE_OUT=-o $(AM_NULL)
AM_OBJ_OUT=-o $(AM_NULL)
AM_SRC_IN=
AM_SHARED_LIB_MAKE = $(AM_STATIC_LIB_MAKE)

AMULET_ROOT=$(AMULET_DIR)

# targets exist to build the following library variants
# select from the following
# develop-shared (optimized, inspector, debugging symbols, dynamically linked)
# develop-static (optimized, inspector, debugging sybmols, statically linked)
# release-shared (optimized, no inspector, no debugging symbols, dynamically linked)
# release-static (optimized, no inspector, no debugging symbols, statically linked)
# all-libs (all of the above, uses the same object files for shared and static pairs)
# inhouse-shared (not optimized, inspector, debugging symbols, dynamically linked)
# inhouse-static (not optimized, inspector, debugging symbols statically linked)
# amulet (same as invoking make without arguments)
AM_LIBS_TO_MAKE = amulet

# compiler flags to use for building tests and samples for target all
AM_SAMPLE_FLAGS = $(AM_DEVELOP)

include $(AMULET_DIR)/bin/$(AMULET_VARS_FILE)
