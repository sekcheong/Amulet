# In-house shared library version.
#
# This makefile differs from Makefile.lib.gcc.shared in that libamulet.so is not
# monolithic -- it contains only Opal+Interactors+Widgets+Debug.
# The remaining parts of Amulet reside in libamgem.so, libamobject.so, 
# and libamutils.so, which (on SunOS and HP/UX) are automatically
# included when you say -lamulet.  This arrangement is highly desirable for
# Amulet library development, so that work done on high levels of Amulet 
# doesn't require any relinking of low levels of Amulet.
#
# But this arrangement is undesirable for release for two reasons:
#     1. Amulet users would have to distribute 4 shared libraries with their
#        Amulet applications, instead of just one;
#     2. Several platforms (Solaris and linux) do not support automatic
#        references between shared objects, so users would have to say
#        "-lamulet -lamgem -lamobject -lamutils" in order to link in Amulet.
# This is why the default Makefile.lib.gcc.shared generates just one, monolithic
# libamulet.so.
#


# Note: use "gcc" instead of "g++" (otherwise -- at least on SunOS -- it
# tries to compile the standard C++ libraries into the shared library).
SHARED_CC=$(CC:g++=gcc) -shared

UTILS_lib=libamutils$(LIB_MODIFIER)
GEM_lib=libamgem$(LIB_MODIFIER)
ORE_lib=libamobject$(LIB_MODIFIER)
AMULET_lib=libamulet$(LIB_MODIFIER)

UTILS_LIB=$(LIB_DIR)/$(UTILS_lib).so
GEM_LIB=$(LIB_DIR)/$(GEM_lib).so
ORE_LIB=$(LIB_DIR)/$(ORE_lib).so
AMULET_LIB=$(LIB_DIR)/$(AMULET_lib).so

V=$(AM_MAJOR_VERSION).$(AM_MINOR_VERSION)

FULL_AMULET_DEPENDENCIES = $(OPAL_MODULE) $(INTER_MODULE) \
	$(DEBUG_MODULE) $(WIDGETS_MODULE) $(GESTURE_MODULE) \
	$(ANIM_MODULE)
FULL_ORE_DEPENDENCIES = $(ORE_MODULE)
FULL_GEM_DEPENDENCIES = $(GEM_MODULE)
FULL_UTILS_DEPENDENCIES = $(UTILS_MODULE)

# Undefine these parameters, for example
#	AMULET_LIB_DEPENDENCIES =
# to keep from rebuilding the Amulet libraries after deleting the
# Amulet object files 
AMULET_LIB_DEPENDENCIES = $(FULL_AMULET_DEPENDENCIES)
ORE_LIB_DEPENDENCIES = $(FULL_ORE_DEPENDENCIES)
GEM_LIB_DEPENDENCIES = $(FULL_GEM_DEPENDENCIES)
UTILS_LIB_DEPENDENCIES = $(FULL_UTILS_DEPENDENCIES)

$(AMULET_LIB):: $(GEM_LIB) $(ORE_LIB) $(UTILS_LIB)
$(AMULET_LIB):: $(AMULET_LIB_DEPENDENCIES)
	$(SHARED_CC) $(AM_CFLAGS) $(FULL_AMULET_DEPENDENCIES) \
	  -L$(LIB_DIR) -lamgem$(LIB_MODIFIER) -lamobject$(LIB_MODIFIER) \
	  -lamutils$(LIB_MODIFIER) \
	  -o $(LIB_DIR)/$(AMULET_lib).so.$(V)
	cd $(LIB_DIR); for p in $(AMULET_lib).sl $(AMULET_lib).so ; \
		do rm -f $$p ; ln -s $(AMULET_lib).so.$(V) $$p ; done

$(GEM_LIB):: $(UTILS_LIB)
$(GEM_LIB):: $(GEM_LIB_DEPENDENCIES)
	$(SHARED_CC) $(AM_CFLAGS) $(FULL_GEM_DEPENDENCIES) \
	  -L$(LIB_DIR) -lamutils$(LIB_MODIFIER) \
	  -o $(LIB_DIR)/$(GEM_lib).so.$(V)
	cd $(LIB_DIR); for p in $(GEM_lib).sl $(GEM_lib).so ; \
		do rm -f $$p ; ln -s $(GEM_lib).so.$(V) $$p ; done

$(ORE_LIB):: $(UTILS_LIB)
$(ORE_LIB):: $(ORE_LIB_DEPENDENCIES)
	$(SHARED_CC) $(AM_CFLAGS) $(FULL_ORE_DEPENDENCIES) \
	  -L$(LIB_DIR) -lamutils$(LIB_MODIFIER) \
	  -o $(LIB_DIR)/$(ORE_lib).so.$(V)
	cd $(LIB_DIR); for p in $(ORE_lib).sl $(ORE_lib).so ; \
		do rm -f $$p ; ln -s $(ORE_lib).so.$(V) $$p ; done

$(UTILS_LIB): $(UTILS_LIB_DEPENDENCIES)
	$(SHARED_CC) $(AM_CFLAGS) $(FULL_UTILS_DEPENDENCIES) \
	  -o $(LIB_DIR)/$(UTILS_lib).so.$(V)
	cd $(LIB_DIR); for p in $(UTILS_lib).sl $(UTILS_lib).so ; \
		do rm -f $$p ; ln -s $(UTILS_lib).so.$(V) $$p ; done


# Use these declarations to compile tests against shared libs.

NEEDS_GEM = $(GEM_LIB)
USES_GEM  = -L$(LIB_DIR) -lamgem$(LIB_MODIFIER)
STATIC_GEM = 

NEEDS_ORE = $(ORE_LIB)
USES_ORE  = -L$(LIB_DIR) -lamobject$(LIB_MODIFIER)
STATIC_ORE = 

NEEDS_ALL = $(AMULET_LIB)
USES_ALL  = -L$(LIB_DIR) -lamulet$(LIB_MODIFIER)
STATIC_ALL = 


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# Inference rule
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 

.cc.o:
	$(CC) $(CFLAGS) -c $< -o $@
